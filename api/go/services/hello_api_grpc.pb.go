// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloAPIClient is the client API for HelloAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloAPIClient interface {
	GetGreetings(ctx context.Context, in *GetGreetingsRequest, opts ...grpc.CallOption) (*GetGreetingsReply, error)
}

type helloAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloAPIClient(cc grpc.ClientConnInterface) HelloAPIClient {
	return &helloAPIClient{cc}
}

func (c *helloAPIClient) GetGreetings(ctx context.Context, in *GetGreetingsRequest, opts ...grpc.CallOption) (*GetGreetingsReply, error) {
	out := new(GetGreetingsReply)
	err := c.cc.Invoke(ctx, "/api.HelloAPI/GetGreetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloAPIServer is the server API for HelloAPI service.
// All implementations must embed UnimplementedHelloAPIServer
// for forward compatibility
type HelloAPIServer interface {
	GetGreetings(context.Context, *GetGreetingsRequest) (*GetGreetingsReply, error)
	mustEmbedUnimplementedHelloAPIServer()
}

// UnimplementedHelloAPIServer must be embedded to have forward compatible implementations.
type UnimplementedHelloAPIServer struct {
}

func (UnimplementedHelloAPIServer) GetGreetings(context.Context, *GetGreetingsRequest) (*GetGreetingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreetings not implemented")
}
func (UnimplementedHelloAPIServer) mustEmbedUnimplementedHelloAPIServer() {}

// UnsafeHelloAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloAPIServer will
// result in compilation errors.
type UnsafeHelloAPIServer interface {
	mustEmbedUnimplementedHelloAPIServer()
}

func RegisterHelloAPIServer(s grpc.ServiceRegistrar, srv HelloAPIServer) {
	s.RegisterService(&HelloAPI_ServiceDesc, srv)
}

func _HelloAPI_GetGreetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloAPIServer).GetGreetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HelloAPI/GetGreetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloAPIServer).GetGreetings(ctx, req.(*GetGreetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloAPI_ServiceDesc is the grpc.ServiceDesc for HelloAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.HelloAPI",
	HandlerType: (*HelloAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGreetings",
			Handler:    _HelloAPI_GetGreetings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/hello_api.proto",
}
